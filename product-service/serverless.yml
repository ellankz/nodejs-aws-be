# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: product-service
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  stage: dev
  region: eu-west-1
  httpApi:
    cors: true
  environment:
    PG_HOST: ${PG_HOST}
    PG_PORT: ${PG_PORT}
    PG_DATABASE: ${PG_DATABASE}
    PG_USERNAME: ${PG_USERNAME}
    PG_PASSWORD: ${PG_PASSWORD}

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

functions:
  getProductsList:
    handler: handler.getProductsList
    events:
      - http:
          path: /products
          method: get
          documentation:
            summary: 'Get all products'
            description: 'Returns the list of all products'
            requestModels:
              application/json: 'GetProductsListRequest'
            methodResponses:
              - statusCode: 200
                responseBody:
                  description: 'List of all products'
                responseModels:
                  application/json: 'GetProductsListResponse'
              - statusCode: 500
                responseBody:
                  description: 'Error getting list of products'
                responseModels:
                  application/json: 'ErrorResponse'
  getProductsById:
    handler: handler.getProductsById
    events:
      - http:
          path: /products/{productId}
          method: get
          documentation:
            summary: 'Get product by id'
            description: 'Returns product info'
            requestModels:
              application/json: 'GetProductRequest'
            pathParams:
              - name: 'productId'
                description: 'Id of the product'
                schema:
                  type: string
            methodResponses:
              - statusCode: 200
                responseBody:
                  description: 'Product info'
                responseModels:
                  application/json: 'GetProductResponse'
              - statusCode: 500
                responseBody:
                  description: 'Error getting product'
                responseModels:
                  application/json: 'ErrorResponse'
  createProduct:
    handler: handler.createProduct
    events:
      - http:
          path: /products
          method: post
          cors: true
          documentation:
            summary: 'Create one product'
            description: 'Creates one new product'
            requestModels:
              application/json: 'CreateProductRequest'
            requestBody:
              description: 'A user information object'
            methodResponses:
              - statusCode: 200
                responseBody:
                  description: 'Product info'
                responseModels:
                  application/json: 'GetProductResponse'
              - statusCode: 500
                responseBody:
                  description: 'Error creating product'
                responseModels:
                  application/json: 'ErrorResponse'
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
plugins:
  - serverless-webpack
  - serverless-openapi-documentation
custom:
  webpack:
    webpackConfig: 'webpack.config.js' # Name of webpack configuration file
    includeModules: false # Node modules configuration for packaging
    packager: 'npm' # Packager that will be used to package your external modules
    excludeFiles: src/**/*.test.js # Provide a glob for files to ignore
  documentation:
    version: '1'
    title: 'Products API'
    description: 'Products API'
    models:
      - name: 'ErrorResponse'
        description: 'This is an error'
        contentType: 'application/json'
        schema: ${file(models/ErrorResponse.json)}
      - name: 'GetProductsListResponse'
        description: 'GET Document response model'
        contentType: 'application/json'
        schema: ${file(models/GetProductsListResponse.json)}
      - name: 'GetProductsListRequest'
        description: 'GET Document request mode'
        contentType: 'application/json'
        schema: ${file(models/GetProductsListRequest.json)}
      - name: 'GetProductResponse'
        description: 'GET Document response model'
        contentType: 'application/json'
        schema: ${file(models/GetProductResponse.json)}
      - name: 'GetProductRequest'
        description: 'GET Document request mode'
        contentType: 'application/json'
        schema: ${file(models/GetProductRequest.json)}

package:
  individually: true
